{"version":3,"sources":["App.js","usePersistedState.js","marker-style.js","serviceWorker.js","index.js"],"names":["_renderMarker","place","i","name","coordinates","key","longitude","latitude","captureDrag","captureDoubleClick","className","useStyles","makeStyles","theme","root","display","width","marginTop","spacing","infoButton","geocoder","zIndex","textAlign","margin","appBar","backgroundColor","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","marginRight","title","flexGrow","overflow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","contentShift","INITIAL_VIEW_STATE","zoom","pitch","bearing","minZoom","maxZoom","App","showBorder","onTilesLoad","classes","MAPBOX_TOKEN","aodLayer","MVTLayer","data","getLineColor","getFillColor","d","properties","aod_prop","pickable","useState","viewState","setViewState","onViewStateChange","useCallback","defaultValue","React","persistedState","localStorage","getItem","JSON","parse","state","setState","useEffect","window","setItem","stringify","usePersistedState","markers","setMarkers","markersMemo","useMemo","open","setOpen","CssBaseline","AppBar","position","clsx","Toolbar","Typography","variant","noWrap","tabIndex","inputPlaceholder","accessToken","onSelect","result","concat","text","center","transitionDuration","showLoader","focusOnMount","country","proximity","bbox","IconButton","color","aria-label","edge","onClick","ContextProvider","MapContext","Provider","layers","views","MapView","repeat","controller","getTooltip","object","html","Math","round","map","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","Drawer","anchor","paper","Divider","List","style","length","index","ListItem","button","ListItemIcon","filter","el","deletePlace","ListItemText","primary","gotoPlace","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5203b92d.chunk.js","sourcesContent":["// 'aod_prop' : { variable: \"Access to Public Open Space\", hoverInfo: \"Proportion of the population that lives within an Area of Deficiency in Access to Local and District Public Open Space. Area of Deficiency is defined by Greenspace Information for Greater London CIC based on distances to public open space in the London Plan.<br><br>Threshold is based on population in an AoD greater than the London average.\"},\n\nimport React, { useState, useCallback, useMemo } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { MVTLayer } from '@deck.gl/geo-layers'\nimport { _MapContext as MapContext, StaticMap, Marker } from 'react-map-gl'\nimport MatGeocoder from 'react-mui-mapbox-geocoder'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { MapView } from '@deck.gl/core'\nimport IconButton from '@material-ui/core/IconButton'\nimport MARKER_STYLE from './marker-style'\nimport usePersistedState from './usePersistedState'\nimport clsx from 'clsx'\nimport Drawer from '@material-ui/core/Drawer'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst drawerWidth = 240\n\nconst _renderMarker = (place, i) => {\n  const { name, coordinates } = place\n  return (\n    <Marker\n      key={i}\n      longitude={coordinates[0]}\n      latitude={coordinates[1]}\n      captureDrag={false}\n      captureDoubleClick={false}\n    >\n      <div className=\"place\">\n        <span>{name}</span>\n      </div>\n    </Marker>\n  )\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2)\n    }\n  },\n  infoButton: {\n    // position: 'absolute',\n    // bottom: '10px',\n    // right: '10px'\n  },\n  geocoder: {\n    zIndex: 4,\n    textAlign: 'center',\n    margin: '1rem auto',\n    width: '80%'\n  },\n  appBar: {\n    backgroundColor: 'unset',\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: drawerWidth\n  },\n  title: {\n    flexGrow: 1,\n    overflow: 'visible'\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start'\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginRight: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: 0\n  }\n}))\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -0.03,\n  latitude: 51.49,\n  zoom: 9,\n  pitch: 0,\n  bearing: 0,\n  minZoom: 9,\n  maxZoom: 17\n}\n\nexport default function App({ showBorder = false, onTilesLoad = null }) {\n  const classes = useStyles()\n\n  const MAPBOX_TOKEN =\n    'pk.eyJ1IjoiZ2xhLWdpcyIsImEiOiJjanBvNGh1bncwOTkzNDNueWt5MGU1ZGtiIn0.XFxLdq2dXttcXSXTiREPTA'\n\n  const getTooltip = ({ object }) => {\n    return (\n      object && {\n        html: `\\\n        <div>AoD score: ${\n          object.properties.aod_prop !== -999\n            ? Math.round(object.properties.aod_prop * 100) + '%'\n            : 'n/a'\n        }</div>`\n      }\n    )\n  }\n\n  const aodLayer = new MVTLayer({\n    data: `https://circular-attraction.glitch.me/data/aod-hexes/{z}/{x}/{y}.pbf`,\n    minZoom: 9,\n    maxZoom: 17,\n    getLineColor: [224, 224, 224],\n    getFillColor: d => {\n      const val = 224 - d.properties.aod_prop * 224\n      return [255, 255, 255, val]\n    },\n    pickable: true\n  })\n\n  const [viewState, setViewState] = useState(INITIAL_VIEW_STATE)\n\n  const onViewStateChange = useCallback(({ viewState }) => {\n    setViewState(viewState)\n  }, [])\n\n  const geocoderApiOptions = {\n    country: 'gb',\n    proximity: { longitude: 0, latitude: 51.49 },\n    bbox: [-0.489, 51.28, 0.236, 51.686]\n  }\n\n  const [markers, setMarkers] = usePersistedState('markers', [])\n  const markersMemo = useMemo(() => markers, [markers])\n\n  const onSelectHandler = result => {\n    setMarkers(\n      markers.concat([\n        {\n          name: result.text,\n          coordinates: [result.center[0], result.center[1]]\n        }\n      ])\n    )\n\n    setViewState({\n      longitude: result.center[0],\n      latitude: result.center[1],\n      zoom: 14,\n      transitionDuration: 400\n    })\n  }\n\n  const [open, setOpen] = React.useState(false)\n\n  const handleDrawerOpen = () => {\n    setOpen(true)\n  }\n\n  const handleDrawerClose = () => {\n    setOpen(false)\n  }\n\n  const deletePlace = place => {\n    setMarkers(markers.filter(el => el !== place))\n  }\n\n  const gotoPlace = place => {\n    setViewState({\n      longitude: place.coordinates[0],\n      latitude: place.coordinates[1],\n      zoom: 14,\n      transitionDuration: 400\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap className={classes.title}>\n            <div className={classes.geocoder}>\n              <MatGeocoder\n                tabIndex={0}\n                inputPlaceholder=\"Search Postcode or Address\"\n                accessToken={MAPBOX_TOKEN}\n                onSelect={onSelectHandler}\n                showLoader={true}\n                focusOnMount={true}\n                {...geocoderApiOptions}\n              />{' '}\n            </div>{' '}\n          </Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n            className={clsx(open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <DeckGL\n          ContextProvider={MapContext.Provider}\n          layers={[aodLayer]}\n          views={new MapView({ repeat: true })}\n          viewState={viewState}\n          onViewStateChange={onViewStateChange}\n          controller={true}\n          getTooltip={getTooltip}\n        >\n          <style>{MARKER_STYLE}</style>\n          {markersMemo.map(_renderMarker)}{' '}\n          <StaticMap\n            reuseMaps\n            mapStyle=\"os_night.json\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          ></StaticMap>\n        </DeckGL>\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronRightIcon />\n          </IconButton>\n        </div>\n        <Divider />\n\n        <List>\n          <div style={{ padding: '0 1rem' }}>\n            <h3>Access to Public Open Space Score</h3>\n            <p>\n              The score for each hex area shows the proportion of households\n              within this area that are located in an Area of Deficiency in\n              access to local and district public open space (AoD).\n            </p>\n            <p>\n              The darker areas of the map show where there is less access to\n              public open space, and so a dark cell with a score of 100% means\n              that all households in that area are in an AoD.{' '}\n            </p>\n            <p>\n              Cells with a value of <code>n/a</code> have either no households\n              or data\n            </p>\n          </div>\n          <Divider />\n          <div style={{ padding: '0 1rem' }}>\n            {markers.length > 0 ? <h3>Saved places</h3> : ''}\n            {markersMemo.map((place, index) => (\n              <ListItem button key={place.name}>\n                <ListItemIcon>\n                  <CloseIcon tabIndex={0} onClick={() => deletePlace(place)} />\n                </ListItemIcon>\n                <ListItemText\n                  tabIndex={0}\n                  primary={place.name}\n                  onClick={() => gotoPlace(place)}\n                />\n              </ListItem>\n            ))}\n          </div>\n        </List>\n      </Drawer>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function usePersistedState(key, defaultValue) {\n  const [state, setState] = React.useState(() => {\n    const persistedState = localStorage.getItem(key)\n    return persistedState ? JSON.parse(persistedState) : defaultValue\n  })\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state))\n  }, [state, key])\n  return [state, setState]\n}\n","export default `\n.place:before {\n  content: ' ';\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  background: red;\n  border-radius: 8px;\n  margin: 0 8px;\n}\n.place {\n  border-radius: 20px;\n  padding-right: 12px;\n  margin: -12px;\n  color: transparent;\n  line-height: 24px;\n  font-size: 13px;\n  white-space: nowrap;\n  background: rgba(0,0,0,0.8);\n}\n.place span {\n  /* display: none; */\n  color: #fff;\n  display: inline-block;\n}\n.place:hover {\n  background: rgba(0,0,0,0.8);\n  color: #fff;\n}\n.place:hover span {\n  display: inline-block;\n}\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}