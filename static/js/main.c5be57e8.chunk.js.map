{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","useStyles","makeStyles","theme","root","width","marginTop","spacing","infoButton","position","top","right","geocoder","zIndex","left","maxWidth","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","minZoom","maxZoom","App","showBorder","onTilesLoad","classes","MAPBOX_TOKEN","LLayer","MVTLayer","data","getLineColor","getFillColor","d","properties","aod_prop","pickable","useState","viewState","setViewState","onViewStateChange","useCallback","open","setOpen","handleClose","layers","views","MapView","repeat","controller","getTooltip","object","html","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","className","IconButton","tabIndex","style","color","aria-label","onClick","fontSize","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","inputPlaceholder","accessToken","onSelect","result","center","transitionDuration","showLoader","focusOnMount","country","proximity","bbox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5be57e8.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport DeckGL from '@deck.gl/react'\nimport { MVTLayer } from '@deck.gl/geo-layers'\nimport { StaticMap } from 'react-map-gl'\nimport MatGeocoder from 'react-mui-mapbox-geocoder'\nimport { makeStyles } from '@material-ui/core/styles'\nimport IconButton from '@material-ui/core/IconButton'\nimport InfoIcon from '@material-ui/icons/Info'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport { MapView } from '@deck.gl/core'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Slide from '@material-ui/core/Slide'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2)\n    }\n  },\n  infoButton: {\n    position: 'absolute',\n    top: '10px',\n    right: '10px'\n  },\n  geocoder: {\n    zIndex: 4,\n    position: 'absolute',\n    top: '10px',\n    left: '10px',\n    width: '300px',\n    maxWidth: 'calc(100% - 20px)'\n  }\n}))\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -0.03,\n  latitude: 51.49,\n  zoom: 9,\n  pitch: 0,\n  bearing: 0,\n  minZoom: 9,\n  maxZoom: 17\n}\n\nexport default function App({ showBorder = false, onTilesLoad = null }) {\n  const classes = useStyles()\n\n  const MAPBOX_TOKEN =\n    'pk.eyJ1IjoiZ2xhLWdpcyIsImEiOiJjanBvNGh1bncwOTkzNDNueWt5MGU1ZGtiIn0.XFxLdq2dXttcXSXTiREPTA'\n\n  const getTooltip = ({ object }) => {\n    return (\n      object && {\n        html: `Access to Public Open Space score: ${\n          object.properties.aod_prop !== -999\n            ? object.properties.aod_prop * 100 + '%'\n            : 'n/a'\n        }`\n      }\n    )\n  }\n\n  // 'aod_prop' : { variable: \"Access to Public Open Space\", Value : \"aod_prop\", displayValue: \"aod\", displayUnit: \"% pop\", averageLondon: \"aod_lon_av\", thresholdValue: \"aod_th_val\", thresholdValueProp: \"aod_th_val_prop\",  hoverInfo: \"Proportion of the population that lives within an Area of Deficiency in Access to Local and District Public Open Space. Area of Deficiency is defined by Greenspace Information for Greater London CIC based on distances to public open space in the London Plan.<br><br>Threshold is based on population in an AoD greater than the London average.\"},\n\n  const LLayer = new MVTLayer({\n    data: `https://circular-attraction.glitch.me/data/aod-hexes/{z}/{x}/{y}.pbf`,\n    minZoom: 9,\n    maxZoom: 17,\n    getLineColor: [32, 32, 32],\n    getFillColor: d => {\n      const val = d.properties.aod_prop * 224\n      return [255, 255, 255, val]\n    },\n    pickable: true\n  })\n\n  const [viewState, setViewState] = useState(INITIAL_VIEW_STATE)\n\n  const onViewStateChange = useCallback(({ viewState }) => {\n    // Manipulate view state\n    // viewState.target[0] = Math.min(viewState.target[0], 10)\n    // Save the view state and trigger rerender\n    setViewState(viewState)\n  }, [])\n\n  const geocoderApiOptions = {\n    country: 'gb',\n    proximity: { longitude: 0, latitude: 51.49 },\n    bbox: [-0.489, 51.28, 0.236, 51.686]\n  }\n\n  const onSelectHandler = result => {\n    setViewState({\n      longitude: result.center[0],\n      latitude: result.center[1],\n      zoom: 14,\n      transitionDuration: 400\n    })\n  }\n\n  const [open, setOpen] = useState(false)\n\n  const handleClick = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleClickSnack = () => {\n    setOpen(true)\n  }\n\n  const handleCloseSnack = (event, reason) => {\n    if (reason === 'clickaway') {\n      return\n    }\n\n    setOpen(false)\n  }\n\n  return (\n    <DeckGL\n      layers={[LLayer]}\n      views={new MapView({ repeat: true })}\n      viewState={viewState}\n      onViewStateChange={onViewStateChange}\n      controller={true}\n      getTooltip={getTooltip}\n    >\n      <StaticMap\n        reuseMaps\n        mapStyle=\"os_night.json\"\n        preventStyleDiffing={true}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n      ></StaticMap>\n      <div className={classes.infoButton}>\n        <IconButton\n          tabIndex={1}\n          style={{ color: '#FFFFFF' }}\n          aria-label=\"info\"\n          onClick={handleClick}\n        >\n          <InfoIcon fontSize=\"large\" />\n        </IconButton>\n      </div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          {'Access to Public Open Space Score'}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            The score for each hex area shows the proportion of households\n            within this area that are located in an Area of Deficiency in access\n            to local and district public open space (AoD). The white areas of\n            the map show where access to public open space is worst, and so a\n            score of 100% means that all households are in an AoD.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <div className={classes.geocoder}>\n        <MatGeocoder\n          tabIndex={0}\n          inputPlaceholder=\"Search Postcode or Address\"\n          accessToken={MAPBOX_TOKEN}\n          onSelect={onSelectHandler}\n          showLoader={true}\n          focusOnMount={true}\n          {...geocoderApiOptions}\n        />{' '}\n      </div>{' '}\n    </DeckGL>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}